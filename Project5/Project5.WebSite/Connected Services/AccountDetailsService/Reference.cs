//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Project5.WebSite.AccountDetailsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountDetailsService.IAccountService")]
    public interface IAccountService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        bool CreateAccount(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        System.Threading.Tasks.Task<bool> CreateAccountAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddDevice", ReplyAction="http://tempuri.org/IAccountService/AddDeviceResponse")]
        string AddDevice(string imei, string model, string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddDevice", ReplyAction="http://tempuri.org/IAccountService/AddDeviceResponse")]
        System.Threading.Tasks.Task<string> AddDeviceAsync(string imei, string model, string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/SetBillingInfo", ReplyAction="http://tempuri.org/IAccountService/SetBillingInfoResponse")]
        string SetBillingInfo(string cardNumber, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/SetBillingInfo", ReplyAction="http://tempuri.org/IAccountService/SetBillingInfoResponse")]
        System.Threading.Tasks.Task<string> SetBillingInfoAsync(string cardNumber, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CollectPayment", ReplyAction="http://tempuri.org/IAccountService/CollectPaymentResponse")]
        string CollectPayment(string user, string pass, string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CollectPayment", ReplyAction="http://tempuri.org/IAccountService/CollectPaymentResponse")]
        System.Threading.Tasks.Task<string> CollectPaymentAsync(string user, string pass, string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetUserReport", ReplyAction="http://tempuri.org/IAccountService/GetUserReportResponse")]
        string GetUserReport(string user, string pass, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetUserReport", ReplyAction="http://tempuri.org/IAccountService/GetUserReportResponse")]
        System.Threading.Tasks.Task<string> GetUserReportAsync(string user, string pass, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetDeviceInfo", ReplyAction="http://tempuri.org/IAccountService/GetDeviceInfoResponse")]
        string[][] GetDeviceInfo(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetDeviceInfo", ReplyAction="http://tempuri.org/IAccountService/GetDeviceInfoResponse")]
        System.Threading.Tasks.Task<string[][]> GetDeviceInfoAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Reset", ReplyAction="http://tempuri.org/IAccountService/ResetResponse")]
        void Reset();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Reset", ReplyAction="http://tempuri.org/IAccountService/ResetResponse")]
        System.Threading.Tasks.Task ResetAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountServiceChannel : Project5.WebSite.AccountDetailsService.IAccountService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<Project5.WebSite.AccountDetailsService.IAccountService>, Project5.WebSite.AccountDetailsService.IAccountService {
        
        public AccountServiceClient() {
        }
        
        public AccountServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateAccount(string username, string password) {
            return base.Channel.CreateAccount(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAccountAsync(string username, string password) {
            return base.Channel.CreateAccountAsync(username, password);
        }
        
        public string AddDevice(string imei, string model, string user, string pass) {
            return base.Channel.AddDevice(imei, model, user, pass);
        }
        
        public System.Threading.Tasks.Task<string> AddDeviceAsync(string imei, string model, string user, string pass) {
            return base.Channel.AddDeviceAsync(imei, model, user, pass);
        }
        
        public string SetBillingInfo(string cardNumber, string username, string password) {
            return base.Channel.SetBillingInfo(cardNumber, username, password);
        }
        
        public System.Threading.Tasks.Task<string> SetBillingInfoAsync(string cardNumber, string username, string password) {
            return base.Channel.SetBillingInfoAsync(cardNumber, username, password);
        }
        
        public string CollectPayment(string user, string pass, string imei) {
            return base.Channel.CollectPayment(user, pass, imei);
        }
        
        public System.Threading.Tasks.Task<string> CollectPaymentAsync(string user, string pass, string imei) {
            return base.Channel.CollectPaymentAsync(user, pass, imei);
        }
        
        public string GetUserReport(string user, string pass, string type) {
            return base.Channel.GetUserReport(user, pass, type);
        }
        
        public System.Threading.Tasks.Task<string> GetUserReportAsync(string user, string pass, string type) {
            return base.Channel.GetUserReportAsync(user, pass, type);
        }
        
        public string[][] GetDeviceInfo(string user) {
            return base.Channel.GetDeviceInfo(user);
        }
        
        public System.Threading.Tasks.Task<string[][]> GetDeviceInfoAsync(string user) {
            return base.Channel.GetDeviceInfoAsync(user);
        }
        
        public void Reset() {
            base.Channel.Reset();
        }
        
        public System.Threading.Tasks.Task ResetAsync() {
            return base.Channel.ResetAsync();
        }
    }
}
